Object subclass: #DiceBag	instanceVariableNames: 'dice'	classVariableNames: ''	poolDictionaries: ''	category: 'MyDice'!!DiceBag methodsFor: 'initialization' stamp: 'VeronikaLarionova 10/21/2018 14:25'!initializedice := Bag new.! !!DiceBag methodsFor: 'accessing' stamp: 'VeronikaLarionova 10/21/2018 14:25'!dice^dice! !!DiceBag methodsFor: 'adding' stamp: 'VeronikaLarionova 10/21/2018 14:26'!addDie: aDieself dice add: aDie.! !!DiceBag methodsFor: 'actions' stamp: 'VeronikaLarionova 10/21/2018 14:28'!roll| sum |sum := 0.self dice doWithOccurrences: [ :die :count|			count timesRepeat: [ 			sum := sum + die roll.					 ]		 ].^ sum.! !TestCase subclass: #DiceBagTest	instanceVariableNames: 'diceBag'	classVariableNames: ''	poolDictionaries: ''	category: 'MyDice'!!DiceBagTest methodsFor: 'tests' stamp: 'VeronikaLarionova 10/21/2018 14:32'!testRoll"self run: #testRoll"100 timesRepeat: [ 		self assert: (diceBag roll between: 1 and: 20). 	 ]! !!DiceBagTest methodsFor: 'initialization' stamp: 'VeronikaLarionova 10/21/2018 14:31'!setUpdiceBag := DiceBag new.diceBag addDie: (Die withFaces: 4);		  addDie: (Die withFaces: 10);		  addDie: (Die new).! !Object subclass: #Die	instanceVariableNames: 'faces'	classVariableNames: ''	poolDictionaries: ''	category: 'MyDice'!!Die methodsFor: 'actions' stamp: 'VeronikaLarionova 10/21/2018 14:17'!roll"The metod is responsible for rolling the die and providing the number from interval <1,faces>"^ self faces atRandom.! !!Die methodsFor: 'initialization' stamp: 'VeronikaLarionova 10/21/2018 14:16'!initializefaces := 6.! !!Die methodsFor: 'printing' stamp: 'VeronikaLarionova 10/21/2018 14:23'!printOn: aStreamaStream<< ('D',self faces asString).! !!Die methodsFor: 'accessing' stamp: 'VeronikaLarionova 10/21/2018 14:00'!faces^faces! !!Die methodsFor: 'accessing' stamp: 'VeronikaLarionova 10/21/2018 14:09'!faces: aNumber"The method is responsible for setting the valid number of faces."(aNumber > 0) ifTrue: [ 	faces := aNumber.] ifFalse: [ 	self error: 'The number of faces should be greater than 0'.].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Die class	instanceVariableNames: ''!!Die class methodsFor: 'as yet unclassified' stamp: 'VeronikaLarionova 10/21/2018 14:00'!withFaces: aNumber"Provides the parametrized instance of a die"^ self new faces: aNumber.! !TestCase subclass: #DieTest	instanceVariableNames: 'die'	classVariableNames: ''	poolDictionaries: ''	category: 'MyDice'!!DieTest methodsFor: 'tests' stamp: 'VeronikaLarionova 10/21/2018 14:23'!testPrintOn"self run: #testPrinting"self assert: die printString equals: 'D6'.die faces: 10.self assert: die printString equals: 'D10'.die faces: 42.self assert: die printString equals: 'D42'.! !!DieTest methodsFor: 'tests' stamp: 'VeronikaLarionova 10/21/2018 14:14'!testSetterAndGetter"self run: #testSetterAndGetter"die faces: 6.self assert: die faces equals: 6.self should: [ die faces: 0 ] raise: Error.self should: [ die faces: -4 ] raise: Error.! !!DieTest methodsFor: 'tests' stamp: 'VeronikaLarionova 10/21/2018 14:15'!testTheDefaultInitialization"self run: #testTheDefaultInitialization"self assert: die faces equals: 6.! !!DieTest methodsFor: 'tests' stamp: 'VeronikaLarionova 10/21/2018 14:19'!testRoll"self run: #testRoll"100 timesRepeat: [ 		self assert: (die roll between: 1 and: die faces).	 ]! !!DieTest methodsFor: 'initialization' stamp: 'VeronikaLarionova 10/21/2018 14:11'!setUp"setting up the test"die := Die new.! !